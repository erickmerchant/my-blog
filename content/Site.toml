title = "ErickMerchant.com"
base = "https://erickmerchant.com"
description = "The personal site of Erick Merchant."
copyright = "Â© 2022 Erick Merchant"

[[links]]
href = "/"
title = "Home"

[[links]]
href = "/minefield/start.html"
title = "Minefield"

[[links]]
href = "https://github.com/erickmerchant/my-blog"
title = "View Source"


[posts.new-design]
title = "New design"
description = "All about the latest design, and rewrite to Rust."
content = """
<p class="Content paragraph">As I tend to do from time to time, I have recently rewritten this site in technologies that currently interest me. A quick summary is it is now written in Rust on the server side, uses web components on the client side, and all the CSS is new.</p>

<h2 class="Content sub-heading">Why Rust?</h2>

<p class="Content paragraph">I started learning <a href="https://www.rust-lang.org/">Rust</a> in 2020 as something to do. I had long wanted to learn a statically typed language, and also wanted to experiment with web assembly, so Rust ended up being at the top of my list of possible languages to learn.</p>

<p class="Content paragraph">I did not get far in 2020 with it. I read <a href="https://doc.rust-lang.org/book/">the book</a> and reread it. Certain concepts took some time to grasp. Then I made some experimental programs with it, and followed some tutorials. I made a static site, and then a dynamic one that used wasm to fetch markdown and render it.</p>

<p class="Content paragraph">Some time in 2021 I started to feel fairly comfortable doing certain things. I am still very much a novice, and suspect I will be for a while longer, but I can make simple programs in it. Rust is a lot of fun.</p>

<h2 class="Content sub-heading">Server requirements</h2>

<p class="Content paragraph">So I decided to make my personal site a dynamic website, instead of static, for the first time probably since somewhere close to ten years. I chose a web framework called <a href="https://actix.rs/">Actix</a>. I had a few hard requirements for the server.</p>

<ul class="Content list">
  <li>Local SSL</li>
  <li>HTTP/2</li>
  <li>Brotli compression</li>
</ul>

<p class="Content paragraph">Actix was able to do all these. I have been lurking on their Discord for a few months, and the community is helpful. Apart from middleware which is a little beyond my current understanding, Actix's api is really versatile and easy to learn. The best place to look has been their examples repo.</p>

<h2 class="Content sub-heading">Cargo dependencies</h2>

<p class="Content paragraph">Some of the more important Cargo dependencies that I am using, besides Actix:</p>

<dl class="Content definition-list">
  <dt class="Content sub-sub-heading"><a href="https://github.com/lambda-fairy/maud">Maud</a></dt>
  <dd>For templating. The only downside to Maud for me is that the changing a template means recompiling the project.</dd>

  <dt class="Content sub-sub-heading"><a href="https://swc.rs/">SWC</a></dt>
  <dd>SWC is for compiling JavaScript. It is basically a Rust Babel, but aims to be many things, such as a Eslint replacement as well. The project is great, but I do worry that its ambitions are a little too big. However I think Deno and Vercel are using it so maybe its ambitions are realistic.</dd>

  <dt class="Content sub-sub-heading"><a href="https://parceljs.org/blog/parcel-css/">Parcel CSS</a></dt>
  <dd>And finally Parcel CSS is for compiling CSS. It is basically like Postcss in Rust. It was actually released when I had most of the server written already. Originally I was using a Sass implementation in Rust, but I had forgotten how sometimes Sass syntax conflicts with vanilla CSS, so I welcomed Parcel's arrival. It is great, allowing me to do nesting and forget about prefixes. The only downside here is its alpha, so it sometimes breaks. Committing my lock file has been a very good thing.</dd>
</dl>

<h2 class="Content sub-heading">Front-end overview</h2>

<h3 class="Content sub-sub-heading">Declarative shadow DOM</h3>

<p class="Content paragraph">For the site redesign I decided to experiment with vanilla web components and <a href="https://web.dev/declarative-shadow-dom/">declarative shadow DOM</a>. Declarative shadow DOM is a game changer I think honestly. I will be writing more about that later.</p>

<h3 class="Content sub-sub-heading">BEM for nested CSS</h3>

<p class="Content paragraph">I plan to write a bit about how I organized CSS later. I started thinking of it as BEM for nested CSS, and I think its worth describing. The design itself is nothing great but I am happy with the gradient in the header and the menu I came up with.</p>

<h3 class="Content sub-sub-heading">Frontend dependencies</h3>

<p class="Content paragraph">I also did not want to use NPM for this project. I wanted to see if I could just use something like Skypack. I ended up using no third-party JS or CSS, even if I wrote it, so there ended up being no need for NPM or Skypack. Not using NPM though means no bundler and no hot module reloading. I plan to add CSS reloading as a feature of the server in the future.</p>

<h2 class="Content sub-heading">Not a blog</h2>

<p class="Content paragraph">So that is a brief overview of the rewrite/redesign. One thing to note also is how I am organizing data. I remember years ago Jekyll described itself as "blog aware". Well this site is "blog oblivious". I have to manually put it into the shape of a blog. That is intentional, but possibly not permanent. I wanted to focus on writing a Rust application, and these other front-end details and not go down a rabbit hole (again) building a blogging engine.</p>
"""
